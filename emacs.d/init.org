#+title: My Emacs Config
#+property: header-args :tangle init.el

* My Emacs Config

Here is the literate version of my Emacs configuration. Everything is contained in a single org-mode file which can be tangled with =org-babel= to produce an Emacs Lisp init file.

#+BEGIN_SRC emacs-lisp
;;;;
;;
;; This file was tangled from `init.org' using Org Babel -- see that
;; file for a literate version of this configuration.
;;
;;;;
#+END_SRC


** Startup
*** Slim down the GUI

#+BEGIN_SRC emacs-lisp
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

*** Start with a blank \*scratch\* buffer

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
#+END_SRC

*** Customize
Keep customized settings in a separate file. Load them here to set up fonts early.

#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC
** General Settings
*** This is not the bell you are looking for

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

*** There can be only one (file encoding)

To really force UTF-8, you will need to customize =file-coding-alist=.

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

*** Backups? We don’t need no stinkin’ backups!

#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
(setq make-backup-files nil)
#+END_SRC

*** They’re against my religion

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

*** In (white)space, no one can see you (unless you turn on =whitespace-mode=)

[[http://ergoemacs.org/emacs/whitespace-mode.html][Simplify]] the display of whitespace characters in =whitespace-mode=, and show trailing whitespace in programming modes.

#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(spaces tabs newline space-mark tab-mark newline-mark))

(setq whitespace-display-mappings
      '(
        (space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
        (newline-mark 10 [182 10]) ; 10 LINE FEED
        (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
        ))

(add-hook 'prog-mode-hook
          (lambda ()
            (setq show-trailing-whitespace t)))
#+END_SRC
*** I don’t need your help (I have the [f1] key)

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map [?\C-h] [?\C-?])
#+END_SRC

*** Beautiful snowflakes

#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

*** Sentences end with a single space
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src

*** Electrify me

#+BEGIN_SRC emacs-lisp
(electric-indent-mode 1)
#+END_SRC

** OS-Specific Settings and Directories

On Windows, emacs (or the =runemacs.exe= binary) starts up in the folder it lives in, and the =HOME= environment variable is set to the =%APPDATA%/Roaming= folder. This is rather inconvenient, so the first thing to do is to create a new shortcut to =runemacs.exe= named ‘emacs’, and set the “Start In:” property to, say, =C:\\Users\\<username>=. This shortcut can live anywhere; I have it pinned to my taskbar. The =HOME= variable we leave alone, since it is used by Emacs to find the =.emacs.d= directory. We don’t need it anyway. For convenience we define some useful directories as constants.

*** Testing OS type

#+BEGIN_SRC emacs-lisp
(defun windows-p ()
  (eq system-type 'windows-nt))
#+END_SRC

*** Path-munging functions

#+BEGIN_SRC emacs-lisp
(defun add-to-path-string (dir path)
  (if (string-equal "" (or path ""))
      dir
    (concat dir path-separator path)))

(defun add-to-exec-path (dir)
  (setenv "PATH"
          (add-to-path-string
           (expand-file-name dir "~")
           (getenv "PATH")))
  (add-to-list 'exec-path dir))
#+END_SRC

*** Linux-only

On Linux, I keep some useful scripts and executables in =~/.local/bin/=.

#+BEGIN_SRC emacs-lisp
(unless (windows-p)
  (add-to-exec-path (expand-file-name ".local/bin" "~")))
#+END_SRC

*** Define directory constants

#+BEGIN_SRC emacs-lisp
(defconst dir/emacsd (file-name-as-directory
                      (expand-file-name ".emacs.d" (getenv "HOME")))
  "Emacs configuration directory.")

(defconst dir/home (file-name-as-directory
                    (if (windows-p)
                        (getenv "USERPROFILE")
                      (expand-file-name "~")))
  "User's home directory.")

(defconst dir/org (file-name-as-directory
                   (expand-file-name
                    (if (windows-p)
                        "Documents/Org"
                      "Org")
                    dir/home))
  "Org file directory.")
#+END_SRC
** Useful stuff
*** Keybindings

There are a lot of things that are useful to toggle on and off; various minor modes such as =whitespace-mode=, line truncation, etc. We define a common keymap to use for these commands:
#+BEGIN_SRC emacs-lisp
(setq toggle/prefix "C-x t")
(setq toggle/keymap (make-sparse-keymap))

(defun toggle/bind-key (key command)
  (define-key toggle/keymap key command))

(global-set-key (kbd toggle/prefix) toggle/keymap)
#+END_SRC

Go ahead and define some toggle commands for built in stuff:
#+BEGIN_SRC emacs-lisp
(toggle/bind-key "l" 'whitespace-mode)
(toggle/bind-key "w" 'toggle-truncate-lines)
#+END_SRC

*** Winner mode

Winner mode saves and restores window configurations. Enable it.
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** Packages
*** Initialization

We need to initialize the package system and manually install and load [[https://github.com/jwiegley/use-package][use-package]] so that we can use it to manage other packages.

Load =package.el=:
#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC

Add the MELPA and Org-mode repositories:
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
             '("org" . "http://orgmode.org/elpa/") t)
#+END_SRC
The Org-mode ELPA repository can be used to install the latest released version of org-mode, but it must be installed manually to override the built-in version.

Initialize the package system and download a list of packages if it doesn’t exist (i.e. on a new system or it has been removed manually):
#+BEGIN_SRC emacs-lisp
(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

Now install and require use-package:
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC

And now we are ready to use =use-package= to configure our packages, and it will even download them for us!
*** Evil

Load evil first because we will want to configure powerline and key bindings for some later packages:

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :demand t
  :init
  (progn
    ; from https://github.com/syl20bnr/spacemacs/blob/master/spacemacs/packages.el
    (setq evil-mode-line-format 'before)
    (setq evil-emacs-state-cursor  '("red" bar))
    (setq evil-normal-state-cursor '("orange" box))
    (setq evil-visual-state-cursor '("black" box))
    (setq evil-insert-state-cursor '("green3" bar))
    (setq evil-motion-state-cursor '("purple" box))
    )
  :config
  (progn

    ; load evil-leader before (evil-mode 1)
    (use-package evil-leader
      :ensure t
      :init
      (progn
        (evil-leader/set-leader ",")
        (global-evil-leader-mode))
      :config
      (progn
        (evil-leader/set-key "t" toggle/keymap)
        ))

    (evil-mode 1)

    (use-package evil-surround
      :ensure t
      :init (global-evil-surround-mode 1))

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-normal-state-map (kbd "C-w q") 'evil-quit)
    (define-key evil-insert-state-map (kbd "C-e") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil)
    (define-key evil-insert-state-map (kbd "C-n") nil)
    ))
#+END_SRC

*** Theme and Powerline

The powerline config is mostly from: https://github.com/syl20bnr/spacemacs/blob/master/spacemacs/packages.el.
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :demand t
  :config
  (progn
    (toggle/bind-key "m" 'powerline-minor-modes-toggle)

    (defun propertize-evil-mode-line-tag ()
      (propertize evil-mode-line-tag 'font-lock-face
                  ;; Don't propertize if we're not in the selected buffer
                  (cond ((not (eq (current-buffer) (car (buffer-list)))) '())
                        ((evil-insert-state-p) '(:background "green3" :foreground "black"))
                        ((evil-emacs-state-p)  '(:background "red" :foreground "black"))
                        ((evil-motion-state-p) '(:background "purple" :foreground "black"))
                        ((evil-visual-state-p) '(:background "gray" :foreground "black"))
                        ((evil-normal-state-p)  '(:background "orange" :foreground "black"))
                        (t '()))))

    (defpowerline powerline-evil-mode (propertize-evil-mode-line-tag))

    (defvar powerline-minor-modesp nil)
    (defun powerline-minor-modes-toggle ()
      "Toggle display of minor modes."
      (interactive)
      (if powerline-minor-modesp
          (setq powerline-minor-modesp nil)
        (setq powerline-minor-modesp t)))

    (defun my-powerline-theme ()
      "Set up my powerline theme with evil mode etc."
      (interactive)
      (setq-default mode-line-format
                    '("%e"
                      (:eval
                       (let* ((active (eq (frame-selected-window) (selected-window)))
                              (face1 (if active 'powerline-active1 'powerline-inactive1))
                              (face2 (if active 'powerline-active2 'powerline-inactive2))
                              (lhs (append (list
                                            ;; (powerline-window-number face1 'l)
                                            (powerline-evil-mode face1 'l)

                                            (powerline-raw "%*" nil 'l)
                                            (powerline-buffer-size nil 'l)
                                            (powerline-buffer-id nil 'l)
                                            (powerline-raw " " nil)

                                            (powerline-arrow-right nil face1)
                                            (powerline-major-mode face1 'l)
                                            (powerline-raw " " face1))

                                           (if powerline-minor-modesp
                                               (list (powerline-arrow-right face1 nil)
                                                     (powerline-minor-modes nil 'l)
                                                     (powerline-raw mode-line-process nil 'l)
                                                     (powerline-raw " " nil)
                                                     (powerline-arrow-right nil face2))
                                             (list (powerline-raw " " face1)
                                                   (powerline-arrow-right face1 face2)))

                                           (list (powerline-vc face2))))
                              (rhs (list
                                    (powerline-raw global-mode-string face2 'r)
                                    (powerline-raw " " face2)

                                    (powerline-arrow-left face2 face1)
                                    (powerline-raw " " face1)
                                    (powerline-raw "%l:%2c" face1 'r)
                                    (powerline-arrow-left face1 nil)
                                    (powerline-raw " " nil)
                                    (powerline-raw "%p" nil 'r)

                                    (powerline-hud face2 face1))))
                         (concat
                          (powerline-render lhs)
                          (powerline-fill face2 (powerline-width rhs))
                          (powerline-render rhs)))))))
    ))
#+END_SRC

Load a theme:
#+BEGIN_SRC emacs-lisp
(use-package moe-theme
  :ensure t
  :config
  (progn
    ;; Resize titles
    ;; (setq moe-theme-resize-markdown-title '(2.0 1.7 1.5 1.3 1.0 1.0))
    ;; (setq moe-theme-resize-org-title '(2.2 1.8 1.6 1.4 1.2 1.0 1.0 1.0 1.0))
    ;; (setq moe-theme-resize-rst-title '(2.0 1.7 1.5 1.3 1.1 1.0))

    (setq moe-theme-mode-line-color 'green)

    (moe-dark)
    (powerline-moe-theme)
    ))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(use-package ample-theme
  :ensure t
  :config (load-theme 'ample t))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(use-package zenburn-theme
  :ensure t
  :config
  (progn (load-theme 'zenburn t)))
#+END_SRC

Set the powerline theme (this gives the themes a chance to set the faces):
#+BEGIN_SRC emacs-lisp
(my-powerline-theme)
#+END_SRC

*** Org Mode

I really need to improve my Org configuration, and especially update for version 8.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :commands org-mode
  :config
  (progn
    ;; configure general org-mode behavior
    (setq org-startup-indented t)
    (setq org-startup-folded 'content)
    (setq org-directory dir/org)

    ;; configure org-agenda
    (setq org-agenda-files (list "agenda.org"))
    (setq org-log-done t)
    (setq org-agenda-span 'month)
    (setq org-agenda-window-setup 'current-window)
    (define-key global-map (kbd "C-c a") 'org-agenda)

    ;; configure latex export
    (setq org-latex-pdf-process
          '("latexmk -c" "latexmk -g -xelatex %f"))

    ;; org-babel for literate programming
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (clojure . t)
                                   (python . t)
                                   (sh . t)
                                   (gnuplot . t)))
    (setq org-src-fontify-natively t)
    (setq org-src-preserve-indentation t)

    (setq org-export-html-coding-system 'utf-8)
    (setq org-export-babel-evaluate nil)

    (use-package htmlize :ensure t)

    (diminish 'org-indent-mode)
    ))
#+END_SRC

*** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :commands magit-status
  :bind ("C-x g" . magit-status))
#+END_SRC

*** Helm

See helm configs at [[https://github.com/bbatsov/prelude][Prelude]] and [[http://tuhdo.github.io/helm-intro.html][A Package in a league of its own: Helm]]
.
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn

    (setq helm-command-prefix-key "C-c h")

    (require 'helm-config)

    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal

    (setq helm-candidate-number-limit 10)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t
          helm-buffers-fuzzy-matching t
          helm-ff-file-name-history-use-recentf t
          helm-move-to-line-cycle-in-source t ; move to end or beginning of source
                                        ; when reaching top or bottom of source.
          helm-split-window-default-side 'other ;; open helm buffer in another window
          helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
          )

    (evil-leader/set-key ":" 'helm-M-x
                         "b" 'helm-mini)

    (helm-mode)))
#+end_src

*** TeX modes

#+BEGIN_SRC emacs-lisp
(use-package tex
  :mode ("\\.tex\\'" . latex-mode)
  :ensure auctex)
(use-package reftex
  :ensure t)
#+END_SRC

*** Programming language modes

**** Clojure

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :mode "\\.clj\\'")

(use-package cider
  :defer t
  :ensure t)
#+END_SRC

**** Gnuplot

#+BEGIN_SRC emacs-lisp
(use-package gnuplot
  :ensure t
  :commands gnuplot-mode)
#+END_SRC

**** Julia

#+BEGIN_SRC emacs-lisp
(use-package julia-mode
  :load-path "~/.emacs.d/elisp/"
  :mode "\\.jl\\'")
#+END_SRC

**** Python

#+BEGIN_SRC emacs-lisp
(use-package python
  :commands python-mode
  :mode ("wscript\\'" . python-mode))
#+END_SRC

*** Other major modes

**** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands markdown-mode)
#+END_SRC

*** Unicycle mode

#+BEGIN_SRC emacs-lisp
(use-package unicycle-mode
  :load-path "~/.emacs.d/elisp/"
  :commands unicycle-mode
  :diminish " ¶"
  :init (toggle/bind-key "u" 'unicycle-mode))
#+END_SRC

*** Undo-Tree mode

=undo-tree= is already installed and required as a dependency of some other package (org mode?), so all we do here is diminish it.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish "")
#+END_SRC
